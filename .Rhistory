library(plyr)
library(tidyverse)
library(yarrr)
#install.packages("remotes")
#remotes::install_github("SachaEpskamp/OSF2R") -- not working #RH: I know, shame would be so cool to download directly from the OSF page
myfiles = list.files("Experiment1", pattern="*.csv", full.names=TRUE)
data_Exp1 = ldply(myfiles, read_csv)
head(data_Exp1)
theme_set(theme_linedraw(base_size = 10))
data_Exp1 <- data_Exp1 %>% #RH: why not keep the name of the original DF? data_exp1?
#select the relevant columns
select("Prolific_ID","result","scoreSelf","scoreOther","ratingGood","ratingBad","penaltySelf","penaltyOther","ratingGoodOther","ratingBadOther","Ntrial","RTmeanP","ratingGoodEnd","ratingBadEnd","ratingGoodOtherEnd","ratingBadOtherEnd") %>%
# Delete all the rows with NA
filter(!is.na(scoreSelf)) %>%
# collapse self and other rating in one column
gather("question", "rating", c("ratingGood","ratingBad","ratingGoodOther","ratingBadOther","ratingGoodEnd","ratingBadEnd","ratingGoodOtherEnd","ratingBadOtherEnd")) %>%
# Delete all the rows with NA
filter(!is.na(rating)) %>%
# add focus
mutate(focus = ifelse(question=="ratingGood"|question=="ratingBad"|question=="ratingGoodEnd"|question=="ratingBadEnd","self","other")) %>%
# change variables in question to ratingGood and ratingBad
mutate(question = case_when(question == "ratingGood"|question == "ratingGoodOther" ~ "ratingGood",question == "ratingBad"|question == "ratingBadOther" ~ "ratingBad",question == "ratingGoodEnd"|question == "ratingGoodOtherEnd" ~ "ratingGoodEnd",question == "ratingBadEnd"|question == "ratingBadOtherEnd" ~ "ratingBadEnd"))
test <- data_Exp1 %>%
group_by(Prolific_ID) %>%
filter(question == "ratingGood" & focus == "self") %>%
summarise(scoreSelf = mean(scoreSelf),
scoreOther = mean(scoreOther),
penaltySelf = sum(penaltySelf),
penaltyOther = sum(penaltyOther))
test %>%
ggplot(aes(x = scoreSelf)) +
geom_density(alpha = .1)
data_Exp1 %>%
group_by(Prolific_ID, question, focus, result) %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>% #remove test sessions and terminated runs
summarise(rating = mean(rating, na.rm = TRUE)) %>%
spread(question, rating) %>%
ggplot(., aes(ratingBad, ratingGood, by = result, colour = result)) +
geom_point() +
geom_smooth(method=lm, formula=y ~ x, color="darkblue") +
geom_rug() +
#geom_density_2d() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
coord_fixed(ratio = 1/1) +
facet_wrap(~focus)
## Pirate plot
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
pirateplot(formula = rating ~ question + focus + result)
# fluctuations rating good/bad across trials
data_Exp1 %>%
ggplot(aes(x = Ntrial, y = rating, fill = question)) +
geom_point() +
geom_smooth(se=TRUE, show.legend = TRUE)
# reaction time across trials
data_Exp1 %>%
ggplot(aes(x = Ntrial, y = RTmeanP)) +
ylim(0, 1) +
geom_point() +
geom_smooth(se=TRUE, show.legend = TRUE)
# rating of the other and the self across trials
data_Exp1 %>%
ggplot(aes(x = Ntrial, y = rating, fill = focus)) +
geom_point() +
geom_smooth(se=TRUE, show.legend = TRUE)
# rating of the other and the self across trials
data_Exp1 %>%
ggplot(aes(x = Ntrial, y = rating, fill = focus)) +
geom_point() +
geom_smooth(se=TRUE, show.legend = TRUE) = facet_wrap(~emotion)
# rating of the other and the self across trials
data_Exp1 %>%
ggplot(aes(x = Ntrial, y = rating, fill = focus)) +
geom_point() +
geom_smooth(se=TRUE, show.legend = TRUE) = facet_wrap(~question)
# rating of the other and the self across trials
data_Exp1 %>%
ggplot(aes(x = Ntrial, y = rating, fill = focus)) +
geom_point() +
geom_smooth(se=TRUE, show.legend = TRUE) + facet_wrap(~question)
# penalties across trials
data_Exp1 %>%
ggplot(aes(x = Ntrial, y = penaltySelf, colour = Prolific_ID)) +
geom_point(show.legend = FALSE)
## result of the game across rounds
# scores of the players themselves
data_Exp1 %>%
ggplot(aes(x = Ntrial, y = scoreSelf, fill = Prolific_ID)) +
geom_point() +
geom_smooth(se=TRUE, show.legend = TRUE)
## Pirate plot
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
pirateplot(formula = rating ~ question + focus + result)
meanratingdata <- data_Exp1 %>% group_by(Prolific_ID, question, result, focus) %>% summarise(rating = mean(rating))
# difference in rating between self and other
t.test(meanratingdata$rating[meanratingdata$focus == 'self'], meanratingdata$rating[meanratingdata$focus == 'other'])
knitr::opts_chunk$set(echo = TRUE)
# RH: If you don't want to have the loading messages displayed in the rmd, you can use  echo = TRUE, message=FALSE as in: ```{r get data and libraries, echo = TRUE, message=FALSE}
library(plyr)
library(tidyverse)
library(yarrr)
#install.packages("remotes")
#remotes::install_github("SachaEpskamp/OSF2R") -- not working #RH: I know, shame would be so cool to download directly from the OSF page
myfiles = list.files("Experiment1", pattern="*.csv", full.names=TRUE)
data_Exp1 = ldply(myfiles, read_csv)
head(data_Exp1)
theme_set(theme_linedraw(base_size = 10))
data_Exp1 <- data_Exp1 %>% #RH: why not keep the name of the original DF? data_exp1?
#select the relevant columns
select("Prolific_ID","result","scoreSelf","scoreOther","ratingGood","ratingBad","penaltySelf","penaltyOther","ratingGoodOther","ratingBadOther","Ntrial","RTmeanP","ratingGoodEnd","ratingBadEnd","ratingGoodOtherEnd","ratingBadOtherEnd") %>%
# Delete all the rows with NA
filter(!is.na(scoreSelf)) %>%
# collapse self and other rating in one column
gather("question", "rating", c("ratingGood","ratingBad","ratingGoodOther","ratingBadOther","ratingGoodEnd","ratingBadEnd","ratingGoodOtherEnd","ratingBadOtherEnd")) %>%
# Delete all the rows with NA
filter(!is.na(rating)) %>%
# add focus
mutate(focus = ifelse(question=="ratingGood"|question=="ratingBad"|question=="ratingGoodEnd"|question=="ratingBadEnd","self","other")) %>%
# change variables in question to ratingGood and ratingBad
mutate(question = case_when(question == "ratingGood"|question == "ratingGoodOther" ~ "ratingGood",question == "ratingBad"|question == "ratingBadOther" ~ "ratingBad",question == "ratingGoodEnd"|question == "ratingGoodOtherEnd" ~ "ratingGoodEnd",question == "ratingBadEnd"|question == "ratingBadOtherEnd" ~ "ratingBadEnd"))
test <- data_Exp1 %>%
group_by(Prolific_ID) %>%
filter(question == "ratingGood" & focus == "self") %>%
summarise(scoreSelf = mean(scoreSelf),
scoreOther = mean(scoreOther),
penaltySelf = sum(penaltySelf),
penaltyOther = sum(penaltyOther))
View(test)
Sys.setenv(MAKEFLAGS = "-j2") # four cores used
install.packages("rstan", type = "source")
remotes::install_github("stan-dev/rstan", ref = "develop",
subdir = "rstan/rstan", build_opts = "")
install.packages("rstan", type = "source")
R.Version()
# to avoid waiting the next time, save the model:
# saveRDS(mod, 'mod_real~corpus_noise.RDS')
# mod = readRDS('mod_real~corpus_noise.RDS')
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", type = "source")
# load data
data <- read.csv("M2L.csv")
# load data
setwd()
# load data
setwd() = dir
# load data
setwd() = ""
# load data
data <- read.csv("M2L.csv")
# load data
getwd()
data <- read.csv("/Users/ruudhortensius/PsyCloud/Coding-projects/ordinal_LMM/M2L.csv")
View(data)
# get rid of trials with incorrect prime responses
data$correct <- ifelse(data$pres_C == data$presp,1,0)
cdat <- subset(data, data$correct == 1)
# coding of predictors
cdat$PR <- scale(ifelse(cdat$prime == "RB",0,1), scale = FALSE)
cdat$TA <- scale(ifelse(cdat$target == "RB",0,1), scale = FALSE)
View(cdat)
# First, run a (maximal) linear mixed model for comparison
library(lme4)
lmm.1 <- lmer(tresp ~ PR*TA +
(1+PR*TA|Subj) +
(1+PR*TA|item),
data = cdat)
summary(lmm.1)
plot(lmm.1)
# Now the same in ordinal
library(ordinal)
install.packages("ordinal")
# Now the same in ordinal
library(ordinal)
#################################
# important: turn response variable into factor
cdat$rating <- factor(cdat$tresp)
#################################
ord.1 <- clmm(rating ~ PR*TA +
(1+PR*TA|Subj) +
(1+PR*TA|item),
data = cdat)
summary(ord.1)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidyverse)
library(yarrr)
#install.packages("remotes")
#remotes::install_github("SachaEpskamp/OSF2R") -- not working #RH: I know, shame would be so cool to download directly from the OSF page
#install.packages("devtools")
#devtools::install_github("thomasp85/patchwork")
#install.packages("patchwork")
library(patchwork)
install.packages("yarr")
library(yarrr)
#install.packages("remotes")
#remotes::install_github("SachaEpskamp/OSF2R") -- not working #RH: I know, shame would be so cool to download directly from the OSF page
#install.packages("devtools")
#devtools::install_github("thomasp85/patchwork")
#install.packages("patchwork")
library(patchwork)
myfiles = list.files("Experiment1",pattern="*.csv", full.names=TRUE)
data_Exp1 = ldply(myfiles, read_csv)
data_Exp1 = ldply(myfiles, read_csv)
head(data_Exp1)
IRI_Exp1 = read.csv("Empateam_exp1_IRI.csv")
# see which participants completed the task
# IRI
IRI_Exp1 <- IRI_Exp1 %>%
# delete rows without ratings
filter(!is.na(iri1)) %>%
# reverse scores if needed (3,4,7,12,13,14,15,18,19)
mutate_at(vars(c("iri3","iri4","iri7","iri12","iri13","iri14","iri15","iri16","iri18","iri19")), funs(case_when(. == 0 ~ 4, . == 1 ~ 3, . == 2 ~ 2, . == 3 ~ 1, . == 4 ~ 0))) %>%
# make new columns (EC,PD,FS,PT)
# EC = iri2, iri4, iri9, iri14, iri18, iri20, iri22
# PD = iri6, iri10, iri13, iri17, iri19, iri24, iri27
# FS = iri1, iri5, iri7, iri12, iri16, iri23, iri26
# PT = iri3, iri8, iri11, iri15, iri21, iri25, iri28
mutate(EC = rowSums(select(.,iri2, iri4, iri9, iri14, iri18, iri20, iri22), na.rm=TRUE)) %>%
mutate(PD = rowSums(select(.,iri6, iri10, iri13, iri17, iri19, iri24, iri27), na.rm=TRUE)) %>%
mutate(FS = rowSums(select(.,iri1, iri5, iri7, iri12, iri16, iri23, iri26), na.rm=TRUE)) %>%
mutate(PT = rowSums(select(.,iri3, iri8, iri11, iri15, iri21, iri25, iri28), na.rm=TRUE)) %>%
#select columns to keep
select("Prolific_ID","EC","PD","FS","PT","play_against")
complete_p <- IRI_Exp1 %>%
mutate(Prolific_ID = as.character(Prolific_ID)) %>%
select(Prolific_ID)
### same subject number twice in both datasets
sum(str_count(data_Exp1$Prolific_ID,"5c91bc95e2d9fb0013386286"))
# main data
data_Exp1 <- data_Exp1 %>%
#select the relevant columns
select("Prolific_ID","result","scoreSelf","scoreOther","ratingGood","ratingBad","penaltySelf","penaltyOther","ratingGoodOther","ratingBadOther","Ntrial","RTmeanP","ratingGoodEnd","ratingBadEnd","ratingGoodOtherEnd","ratingBadOtherEnd") %>%
# Delete all the rows with NA (87 participants)
filter(!is.na(scoreSelf)) %>%
# remove participants if they did not complete task -- why are there 84 participants not 85 like in IRI?
filter(Prolific_ID %in% c(complete_p$Prolific_ID)) %>%
# remove participants (because did not see ratings the last 12 rounds, many penalties)
filter(!Prolific_ID %in% c("5c057594753d6600018799e4","5e26e43fe3c71990eb4b9c60")) %>%
# add column with change and difference in scores
group_by(Prolific_ID) %>%
mutate(updatescore = ifelse(Ntrial != 0,scoreSelf - lag(scoreSelf),NA)) %>%
mutate(updatescore = ifelse(is.na(updatescore),scoreSelf,updatescore)) %>%
mutate(difscore =  scoreSelf - scoreOther) %>%
ungroup()
# add IRI
data_Exp1<- merge(data_Exp1, IRI_Exp1, by="Prolific_ID")  #
data_Exp1 <- data_Exp1 %>%
# collapse self and other rating in one column
gather("question", "rating", c("ratingGood","ratingBad","ratingGoodOther","ratingBadOther","ratingGoodEnd","ratingBadEnd","ratingGoodOtherEnd","ratingBadOtherEnd")) %>%
# Delete all the rows with NA
filter(!is.na(rating)) %>%
# add focus
mutate(focus = ifelse(question=="ratingGood"|question=="ratingBad"|question=="ratingGoodEnd"|question=="ratingBadEnd","self","other")) %>%
# change variables in question to ratingGood and ratingBad
mutate(question = case_when(question == "ratingGood"|question == "ratingGoodOther" ~ "ratingGood",question == "ratingBad"|question == "ratingBadOther" ~ "ratingBad",question == "ratingGoodEnd"|question == "ratingGoodOtherEnd" ~ "ratingGoodEnd",question == "ratingBadEnd"|question == "ratingBadOtherEnd" ~ "ratingBadEnd")) %>%
# reverse winning and losing for the other
mutate(result = case_when(focus == "other" & result == "Win" ~ "Lose",focus == "other" & result == "Lose" ~ "Win", focus == "self" & result == "Win" ~ "Win",focus == "self" & result == "Lose" ~ "Lose"))
data_Exp1 <- data_Exp1 %>%
# previous trials
arrange(Prolific_ID,Ntrial) %>%
mutate(result_beforenow = ifelse(Ntrial== 0|is.na(Ntrial), NA, paste(lag(result,4),result,sep = "_"))) %>%
# overtake
mutate(overtake = ifelse(Ntrial== 0|is.na(Ntrial), "0", case_when(scoreSelf>scoreOther&lag(scoreSelf,4)<=lag(scoreOther,4)~"+",scoreSelf<scoreOther&lag(scoreSelf,4)>=lag(scoreOther,4)~"-"))) %>%
mutate(overtake = ifelse(is.na(overtake),"0",overtake)) %>%
mutate(overtake = case_when(overtake=="0"~"0",overtake=="+"&focus == "self"~"+", overtake=="-"&focus == "self"~"-",overtake=="-"&focus == "other"~"+",overtake=="+"&focus == "other"~"-"))
# reaction time
rtpp <- data_Exp1 %>%
group_by(Prolific_ID) %>%
summarise(RTmeanP = mean(RTmeanP,na.rm=TRUE)) %>%
arrange(RTmeanP) %>%
ungroup()
# see how many lost and who
lost_p <- data_Exp1 %>%
filter(Ntrial == 24 & scoreOther>scoreSelf)
## Pirate plot ---------------------
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
group_by(Prolific_ID,result,focus,question) %>%
summarise(rating = mean(rating)) %>%
pirateplot(formula = rating ~ question + focus + result)
# final feeling game
data_Exp1 %>%
filter(question != "ratingGood" & question != "ratingBad") %>%
pirateplot(formula = rating ~ question + focus + result)
## Density plots to see ratings for feeling good/bad for self/other ------------------
data_Exp1 %>% filter(question == "ratingGood" | question == "ratingBad") %>%
ggplot(aes(x = rating, colour = focus, fill = question)) +
geom_density(alpha = .1) +
scale_color_manual(values=c("purple", "red"))
## ratings over Ntrial ---------------
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
ggplot(aes(x = Ntrial, y = rating, colour = focus)) +
geom_point(alpha = .05) +
facet_grid(cols = vars(result), rows = vars(question)) +
geom_smooth(se=TRUE, show.legend = TRUE)
## Scores of the game across rounds -----------------------
# scores of the players themselves
meanscoretrial <- data_Exp1 %>% group_by(Ntrial) %>% summarise(scoreSelf = mean(scoreSelf)) %>% ungroup()
ggplot(data_Exp1, aes(x = Ntrial, y = scoreSelf)) +
geom_line(aes(group = Prolific_ID), alpha = .3) +
geom_line(data = meanscoretrial, size = 3, color = 'red')
# scores of the other
meanscoretrial2 <- data_Exp1 %>% group_by(Ntrial) %>% summarise(scoreOther = mean(scoreOther)) %>% ungroup()
ggplot(data_Exp1, aes(x = Ntrial, y = scoreOther)) +
geom_line(aes(group = Prolific_ID), alpha = .3) +
geom_line(data = meanscoretrial2, size = 3)
data_Exp1 %>%
filter(question =='ratingBad',focus=='self') %>%
ggplot(aes(x = Ntrial, y = penaltySelf)) +
geom_count() +
scale_size_area()
## link scores and ratings -----------------
# score self
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
ggplot(aes(x = scoreSelf, y = rating, colour = question)) +
geom_point(alpha = 0.05) +
facet_grid(cols = vars(result), rows = vars(focus)) +
geom_smooth(se=TRUE, show.legend = TRUE)
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
ggplot(aes(x = scoreSelf, y = rating, colour = focus)) +
facet_grid(cols = vars(result), rows = vars(question)) +
geom_smooth(se=TRUE, show.legend = TRUE)
# score other
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
ggplot(aes(x = scoreOther, y = rating, colour = question)) +
facet_grid(cols = vars(result), rows = vars(focus)) +
geom_smooth(se=TRUE, show.legend = TRUE)
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
ggplot(aes(x = scoreOther, y = rating, colour = focus)) +
facet_grid(cols = vars(result), rows = vars(question)) +
geom_smooth(se=TRUE, show.legend = TRUE)
# link change in scores and ratings
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
ggplot(aes(x = updatescore, y = rating, colour = question)) +
facet_grid(cols = vars(result), rows = vars(focus)) +
geom_smooth(se=TRUE, show.legend = TRUE)
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
ggplot(aes(x = updatescore, y = rating, colour = focus)) +
geom_point(alpha = 0.10) +
facet_grid(cols = vars(result), rows = vars(question))
# link difference in scores and ratings
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
ggplot(aes(x = difscore, y = rating, colour = question)) +
facet_grid(cols = vars(result), rows = vars(focus)) +
geom_smooth(se=TRUE, show.legend = TRUE)
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
ggplot(aes(x = difscore, y = rating, colour = focus)) +
geom_point(alpha = 0.10) +
facet_grid(cols = vars(result), rows = vars(question)) +
geom_smooth(se=TRUE, show.legend = TRUE)
## reaction time across trials -----------
data_Exp1 %>%
ggplot(aes(x = Ntrial, y = RTmeanP)) +
geom_point(alpha = 0.05) +
ylim(0, 1) +
geom_smooth(se=TRUE, show.legend = TRUE)
# influence trials before
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
filter(!is.na(result_beforenow)) %>%
group_by(Prolific_ID,result_beforenow,focus,question) %>%
summarise(rating = mean(rating)) %>%
pirateplot(formula = rating ~ question + focus + result_beforenow)
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
filter(!is.na(result_beforenow)) %>%
group_by(Prolific_ID,result_beforenow,focus,question) %>%
summarise(rating = mean(rating)) %>%
# overtake
selfovertake <- data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
filter(question == "ratingGood") %>%
pirateplot(formula = rating ~ overtake + focus + result)
ata_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
filter(!is.na(result_beforenow)) %>%
group_by(Prolific_ID,result_beforenow,focus,question) %>%
summarise(rating = mean(rating))
data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
filter(!is.na(result_beforenow)) %>%
group_by(Prolific_ID,result_beforenow,focus,question) %>%
summarise(rating = mean(rating))
selfovertake <- data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
filter(question == "ratingGood") %>%
pirateplot(formula = rating ~ overtake + focus + result)
otherovertake <- data_Exp1 %>%
filter(question != "ratingGoodEnd" & question != "ratingBadEnd") %>%
filter(question == "ratingBad") %>%
pirateplot(formula = rating ~ overtake + focus + result)
selfovertake + otherovertake + plot_layout(ncol=1)
ggplot(aes(x = EC, y = rating, colour = focus)) +
geom_point(alpha = 0.10) +
facet_grid(cols = vars(result_beforenow), rows = vars(question)) +
geom_smooth(method = 'lm', se=TRUE, show.legend = TRUE)
tokens <- data_Exp1 %>%
mutate(play_against = as.character(play_against)) %>%
filter(Ntrial == 0 & focus=='self'&question == 'ratingBad') %>%
select(Prolific_ID,play_against) %>%
unnest_tokens(word, play_against) %>%
count(word, sort = TRUE) %>%
ungroup()
source("R_rainclouds.R")
source("summarySE.R")
library(psych)
library(patchwork)
library(tidyverse)
library(kableExtra)
shiny::runApp('Downloads/RSE18-shiny-workshop-materials-master/worked_example')
shiny::runApp('Downloads/RSE18-shiny-workshop-materials-master/worked_example')
runApp('~/Desktop/interactive-tool')
runApp('Downloads/RSE18-shiny-workshop-materials-master/worked_example')
runApp('Desktop/interactive-tool')
runApp('Desktop/interactive-tool')
runApp('Desktop/interactive-tool')
DF.main <- read_csv("fullset_shiny.csv")
DF.main <- read_csv("fullset_shiny.csv")
library(shiny)
library(shinydashboard)
library(plotly) #this is a problem
library(tidyverse)
library(DT)
library(shiny)
library(shinydashboard)
library(plotly) #this is a problem
library(tidyverse)
library(DT)
DF.main <- read_csv("fullset_shiny.csv")
DF.main <- read_csv("fullset_shiny.csv")
setwd("/Users/ruudhortensius/desktop/interactive-tool")
<-
DF.main <- read_csv("fullset_shiny.csv")
nearVideo <- DF.mean %>%
select(-interaction_score) %>%
ungroup() %>%
nearPoints(input$plot_click, maxpoints = 1) %>%
select(video_id)
nearVideo <- DF.main %>%
select(-interaction_score) %>%
ungroup() %>%
nearPoints(input$plot_click, maxpoints = 1) %>%
select(video_id)
nearVideo <- DF.main %>%
select(-interaction_score) %>%
ungroup() %>%
#nearPoints(input$plot_click, maxpoints = 1) %>%
select(video_id)
nearVideo <- DF.main %>%
select(-interaction_score) %>%
ungroup() %>%
#nearPoints(input$plot_click, maxpoints = 1) %>%
select(video_id)  %>%
filter(video_id == 42)
activeVideo(as.character(nearVideo$video_id))
runApp()
DF.main %>%
select(-interaction_score) %>%
ungroup() %>%
#nearPoints(input$plot_click, maxpoints = 1) %>%
select(video_id) %>%
mutate(video_id = as.character(video_id))
activeVideo <- DF.main %>%
select(-interaction_score) %>%
ungroup() %>%
#nearPoints(input$plot_click, maxpoints = 1) %>%
select(video_id) %>%
filter(video == 43) %>%
mutate(video_id = as.character(video_id))
activeVideo <- DF.main %>%
select(-interaction_score) %>%
ungroup() %>%
#nearPoints(input$plot_click, maxpoints = 1) %>%
select(video_id) %>%
filter(video_id == 43) %>%
mutate(video_id = as.character(video_id))
View(activeVideo)
DF.sc <- DF.main %>%
dplyr::group_by(video_id, group, animation_name) %>% #input$collapse (to have a reactive grouping)
summarise(valence = mean(valence),
arousal = mean(arousal),
confidence = mean(confidence),
interaction_score = mean(interaction_score))
activeVideo <- DF.sc %>%
select(-interaction_score) %>%
ungroup() %>%
#nearPoints(input$plot_click, maxpoints = 1) %>%
select(video_id) %>%
filter(video_id == 43) %>%
mutate(video_id = as.character(video_id))
View(activeVideo)
activeVideo <- DF.sc %>%
select(-interaction_score) %>%
ungroup() %>%
#nearPoints(input$plot_click, maxpoints = 1) %>%
select(video_id) %>%
filter(video_id == 43) %>%
mutate(video_id = as.character(video_id)) %>%
pull()
runApp()
runApp()
